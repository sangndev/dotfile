" [[ Global configs ]]
syntax on
filetype on

let mapleader = " "
let maplocalleader = " "
let g:netrw_banner = 0

set termguicolors
set number
set relativenumber
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set expandtab
set smartindent
set noswapfile
set nobackup
set ruler
set pumheight=10
set signcolumn=yes
set noshowmode
set updatetime=300
set timeoutlen=500
set scrolloff=10
set splitbelow
set splitright
set ignorecase
set smartcase
set cursorline
set clipboard="unnamedplus"
set breakindent
set laststatus=2
set colorcolumn="80"
set confirm
set nolist
set hlsearch

" [[ Keymappings ]]
nnoremap <silent> <leader>e :Ex<cr>
nnoremap <silent> <C-u> <C-u>zz
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv
nnoremap <silent> <leader>h :noh<cr>
nnoremap <silent> <C-d> <C-d>zz
nnoremap <silent> <C-j> <C-w>j 
nnoremap <silent> <C-k> <C-w>k 
nnoremap <silent> <C-h> <C-w>h 
nnoremap <silent> <C-l> <C-w>l 
vnoremap <silent> < <gv
vnoremap <silent> > >gv
vnoremap <silent> K :m '<-2<cr>gv=gv
vnoremap <silent> J :m '>+1<cr>gv=gv
inoremap jk <esc>
tnoremap <esc><esc> <C-\><C-N>

" [[ Plugins ]]
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
" Detect tabstop and shiftwidth automatically
Plug 'tpope/vim-sleuth'
" Colorscheme
Plug 'ghifarit53/tokyonight-vim'
" Fuzzy Search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" Comment
Plug 'tpope/vim-commentary'
" Lsp "
Plug 'neoclide/coc.nvim', { 'branch': 'release'}
" Auto pair
Plug 'LunarWatcher/auto-pairs'
" Synrax highlighting
Plug 'sheerun/vim-polyglot'
call plug#end()

" [[ Configure plugins ]]

" Colorscheme
let g:tokyonight_style = 'night'
let g:tokyonight_enable_italic = 0
colorscheme tokyonight

" fzf-vim
nnoremap <leader>pf :Files<cr>
nnoremap <leader>pb :Buffers<cr>
nnoremap <leader>gg :Rg 

" LSP config
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Use `[g` and `]g` to navigate diagnostics
nmap <silent><nowait> [d <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]d <Plug>(coc-diagnostic-next)
" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming
nmap grn <Plug>(coc-rename)
" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
augroup end
" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
